<<<<<<< .mine
//
//  HeadToHeadViewController.m
//  RacePad
//
//  Created by Gareth Griffith on 8/30/11.
//  Copyright 2011 SBG Racing Services Ltd. All rights reserved.
//

#import "HeadToHeadViewController.h"

#import "DriverLapListController.h"

#import "RacePadCoordinator.h"
#import "BasePadTimeController.h"
#import "RacePadTitleBarController.h"

#import "RacePadDatabase.h"

#import "LeaderBoardView.h"
#import "CommentaryView.h"
#import "BackgroundView.h"
#import "ShinyButton.h"
#import "RacePadSponsor.h"

#import "AnimationTimer.h"

#import "UIConstants.h"


@implementation HeadToHeadViewController

@synthesize driver1;
@synthesize driver2;

- (void)viewDidLoad
{
	[super viewDidLoad];
	
 	[draggedDriverCell removeFromSuperview];

	[leaderboardView SetTableDataClass:[[RacePadDatabase Instance] leaderBoardData]];
	[leaderboardView setAssociatedTrackMapView:nil];
	
	
	//[seeLapsButton setTextColour:[UIColor colorWithRed:1.0 green:0.75 blue:0.05 alpha:1.0]];
	//[seeLapsButton setButtonColour:[UIColor colorWithRed:0.3 green:0.3 blue:0.3 alpha:1.0]];
	//[seeLapsButton setShine:0.1];
	
	// Add tap and long press recognizers to the leaderboard
	[self addTapRecognizerToView:leaderboardView];
	[self addLongPressRecognizerToView:leaderboardView];
	
	
	// Add tap recognizers to buttons to prevent them bringing up ti;e controls
	//[self addTapRecognizerToView:allButton];
	//[self addTapRecognizerToView:seeLapsButton];
	
	[[RacePadCoordinator Instance] AddView:leaderboardView WithType:RPC_LEADER_BOARD_VIEW_];
	
	// Create a view controller for the driver lap times which may be displayed as an overlay
	driver_lap_list_controller_ = [[DriverLapListController alloc] initWithNibName:@"DriverLapListView" bundle:nil];
	driver_lap_list_controller_displayed_ = false;
	driver_lap_list_controller_closing_ = false;
}

- (void)viewWillAppear:(BOOL)animated
{
	if(!driver_lap_list_controller_closing_)
	{
		
		// Register the views
		[[RacePadCoordinator Instance] RegisterViewController:self WithTypeMask:( RPC_LEADER_BOARD_VIEW_ | RPC_COMMENTARY_VIEW_ | RPC_TRACK_MAP_VIEW_ | RPC_LAP_COUNT_VIEW_ | RPC_DRIVER_LIST_VIEW_ | RPC_DRIVER_GAP_INFO_VIEW_)];
		
		[[RacePadCoordinator Instance] SetViewDisplayed:leaderboardView];
		
		[super viewWillAppear:animated];
		
		NSString *carToFollow = [[BasePadCoordinator Instance] nameToFollow];
				
		DriverGapInfo * driverGapInfo = [[RacePadDatabase Instance] driverGapInfo];
		if(driverGapInfo)
		{
			if(carToFollow)
			{
				[[[RacePadDatabase Instance] driverGapInfo] setRequestedDriver:carToFollow];
				[self showDriverInfo:false];
				[self setAllSelected:false];	
			}
			else
			{
				[self hideDriverInfo:false];
				[self setAllSelected:true];	
			}
		}
		else
		{
			[self hideDriverInfo:false];
			[self setAllSelected:true];	
		}
		
		[[RacePadCoordinator Instance] SetViewDisplayed:self];
		
		animating = false;
		showPending = false;
		hidePending = false;
		
		draggedDriverName = nil;
	}
	
}

// Implement viewDidLoad to do additional setup after loading the view, typically from a nib.
- (void)viewWillDisappear:(BOOL)animated
{
	if(driver_lap_list_controller_displayed_)
	{
		driver_lap_list_controller_closing_ = true; // This prevents the resultant viewWillAppear from registering everything
		[self HideDriverLapListAnimated:false];
	}
	
	if(!driver_lap_list_controller_closing_)
	{
		[super viewWillDisappear:animated];
		
		[[RacePadCoordinator Instance] SetViewHidden:leaderboardView];
		[[RacePadCoordinator Instance] SetViewHidden:self];
	}
	
	driver_lap_list_controller_closing_ = false;
}

- (void)willRotateToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation duration:(NSTimeInterval)duration
{
	[super willRotateToInterfaceOrientation:toInterfaceOrientation duration:duration];
}

- (void)didRotateFromInterfaceOrientation:(UIInterfaceOrientation)fromInterfaceOrientation
{
	[super didRotateFromInterfaceOrientation:fromInterfaceOrientation];
}

- (void)prePositionOverlays
{
	[leaderboardView setAlpha:0.0];
	[leaderboardView setHidden:false];
}

- (void) postPositionOverlays
{
	[leaderboardView setAlpha:1.0];
}

- (void)positionOverlays
{
	// Get the device orientation and set things up accordingly
	int orientation = [[RacePadCoordinator Instance] deviceOrientation];
	
	int bg_inset = [backgroundView inset];
	CGRect bg_frame = [backgroundView frame];
	CGRect inset_frame = CGRectInset(bg_frame, bg_inset, bg_inset);
	
	int inset = [backgroundView inset] + 10;
	
	CGRect lb_frame = CGRectMake(inset_frame.origin.x + 5, inset_frame.origin.y + 45, 60, inset_frame.size.height - 45);
	[leaderboardView setFrame:lb_frame];
	
	[self addBackgroundFrames];
}

- (void)addBackgroundFrames
{
}


- (void)showOverlays
{
	[leaderboardView setHidden:false];
	[leaderboardView RequestRedraw];
}

- (void)hideOverlays
{
	[leaderboardView setHidden:true];
}

////////////////////////////////////////////////////////////////////////////

- (void)RequestRedraw
{
	bool driverFound = false;
	
	DriverGapInfo * driverGapInfo = [[RacePadDatabase Instance] driverGapInfo];
	
	if(driverGapInfo)
	{
		NSString * requestedDriver = [driverGapInfo requestedDriver];
		
		if(requestedDriver && [requestedDriver length] > 0)
		{
			NSString * abbr = [driverGapInfo abbr];
			
			if(abbr && [abbr length] > 0)
			{
				driverFound = true;
				
				// Get image list for the driver images
				RacePadDatabase *database = [RacePadDatabase Instance];
				ImageListStore * image_store = [database imageListStore];
				
				ImageList *photoImageList = image_store ? [image_store findList:@"DriverPhotos"] : nil;
				
				if(photoImageList)
				{
					UIImage * image = [photoImageList findItem:abbr];
					if(image)
						[driverPhoto setImage:image];
					else
						[driverPhoto setImage:[UIImage imageNamed:@"NoPhoto.png"]];
				}
				else
				{
					[driverPhoto setImage:[UIImage imageNamed:@"NoPhoto.png"]];
				}
				
				ImageList *helmetImageList = image_store ? [image_store findList:@"DriverHelmets"] : nil;
				
				if(helmetImageList)
				{
					UIImage * image = [helmetImageList findItem:abbr];
					if(image)
						[driverHelmet setImage:image];
					else
						[driverHelmet setImage:[UIImage imageNamed:@"NoHelmet.png"]];
				}
				else
				{
					[driverHelmet setImage:[UIImage imageNamed:@"NoHelmet.png"]];
				}
				
				NSString * firstName = [driverGapInfo firstName];
				NSString * surname = [driverGapInfo surname];
				NSString * teamName = [driverGapInfo teamName];
				
				NSString * carAhead = [driverGapInfo carAhead];
				NSString * carBehind = [driverGapInfo carBehind];
				
				int position = [driverGapInfo position];
				int laps = [driverGapInfo laps];
				bool inPit = [driverGapInfo inPit];
				bool stopped = [driverGapInfo stopped];
				
				float gapAhead = [driverGapInfo gapAhead];
				float gapBehind = [driverGapInfo gapBehind];
				
				[driverFirstNameLabel setText:firstName];
				[driverSurnameLabel setText:surname];
				[driverTeamLabel setText:teamName];
				
				if(position > 0)
				{
					[positionLabel setText:[NSString stringWithFormat:@"P%d", position]];
					
					if(inPit)
					{
						[carAheadLabel setText:@"IN PIT"];			
						[carBehindLabel setText:@""];
						[carAheadLabel setText:@""];
						[gapAheadLabel setText:@""];
					}
					else if(stopped)
					{
						[carAheadLabel setText:@"OUT"];			
						[carBehindLabel setText:@""];
						[carAheadLabel setText:@""];
						[gapAheadLabel setText:@""];
					}
					else
					{
						if(position == 1)
						{
							[carAheadLabel setText:@"LAPS"];			
							[gapAheadLabel setText:[NSString stringWithFormat:@"%d", laps]];
						}
						else if(gapAhead > 0.0)
						{
							[carAheadLabel setText:carAhead];			
							[gapAheadLabel setText:[NSString stringWithFormat:@"+%.1f", gapAhead]];
						}
						else
						{
							[carAheadLabel setText:@""];
							[gapAheadLabel setText:@""];
						}
						
						if(gapBehind > 0.0)
						{
							[carBehindLabel setText:carBehind];
							[gapBehindLabel setText:[NSString stringWithFormat:@"-%.1f", gapBehind]];
						}
						else
						{
							[carBehindLabel setText:@""];
							[gapBehindLabel setText:@""];
						}
					}
				}
				else
				{
					[positionLabel setText:@""];
					[carAheadLabel setText:@""];
					[gapAheadLabel setText:@""];
					[carBehindLabel setText:@""];
					[gapBehindLabel setText:@""];
				}
			}
		}
	}
}

////////////////////////////////////////////////////////////////////////////

- (void)loadDriverInfo
{
	// Get image list for the driver images
	RacePadDatabase *database = [RacePadDatabase Instance];
	ImageListStore * image_store = [database imageListStore];
	
	ImageList *photoImageList = image_store ? [image_store findList:@"DriverPhotos"] : nil;

	if(driver1 && [driver1 length] > 0)
	{
		// Get image list for the driver images
		RacePadDatabase *database = [RacePadDatabase Instance];
		ImageListStore * image_store = [database imageListStore];
				
		ImageList *photoImageList = image_store ? [image_store findList:@"DriverPhotos"] : nil;
				
		if(photoImageList)
		{
			UIImage * image = [photoImageList findItem:driver1];
			if(image)
				[driverPhoto1 setImage:image];
			else
				[driverPhoto1 setImage:[UIImage imageNamed:@"NoPhoto.png"]];
		}
		else
		{
			[driverPhoto1 setImage:[UIImage imageNamed:@"NoPhoto.png"]];
		}
				
		NSString * firstName = [driverGapInfo firstName];
		NSString * surname = [driverGapInfo surname];
		NSString * teamName = [driverGapInfo teamName];
				
		[driverFirstNameLabel setText:firstName];
		[driverSurnameLabel setText:surname];
		[driverTeamLabel setText:teamName];		
	}
	
	if(driver2 && [driver2 length] > 0)
	{
		if(photoImageList)
		{
			UIImage * image = [photoImageList findItem:driver1];
			if(image)
				[driverPhoto2 setImage:image];
			else
				[driverPhoto2 setImage:[UIImage imageNamed:@"NoPhoto.png"]];
		}
		else
		{
			[driverPhoto2 setImage:[UIImage imageNamed:@"NoPhoto.png"]];
		}
		
		NSString * firstName = [driverGapInfo firstName];
		NSString * surname = [driverGapInfo surname];
		NSString * teamName = [driverGapInfo teamName];
		
		[driverFirstNameLabel setText:firstName];
		[driverSurnameLabel setText:surname];
		[driverTeamLabel setText:teamName];		
	}
}

////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
// Gesture recognizers

- (void) OnTapGestureInView:(UIView *)gestureView AtX:(float)x Y:(float)y
{
	if([gestureView isKindOfClass:[UIButton class]]) // Prevents time controllers being invoked on button press
	{
		return;
	}
	else if([gestureView isKindOfClass:[leaderboardView class]])
	{
		NSString * name = [leaderboardView carNameAtX:x Y:y];
		
		if(name && [name length] > 0)
		{
			/* HANDLE DIFFERENTLY HERE
			NSString * oldCar = [trackMapView carToFollow];
			
			[[RacePadCoordinator Instance] setNameToFollow:name];
			[trackMapView followCar:name];
			[trackProfileView setUserOffset:0.0];
			[trackProfileView setUserScale:5.0];
			[trackProfileView followCar:name];
			[trackProfileView RequestRedraw];
			[[[RacePadDatabase Instance] driverGapInfo] setRequestedDriver:name];
			
			// Force reload of data
			[[RacePadCoordinator Instance] SetViewHidden:self];
			[[RacePadCoordinator Instance] SetViewDisplayed:self];
			
			if(!oldCar)
			{
				[self showDriverInfo:true];
			}
			else
			{
				[telemetryButton setHidden:!([[RacePadSponsor Instance]supportsTab:RPS_TELEMETRY_VIEW_] && [telemetry_controller_ supportsCar:[[RacePadCoordinator Instance] nameToFollow]])];
			}
			
			[[[RacePadDatabase Instance] commentary] setCommentaryFor:name];
			
			[trackMapView RequestRedraw];
			
			[trackProfileView setUserOffset:0.0];
			[trackProfileView RequestRedraw];			
			
			[self setAllSelected:false];	
			
			[leaderboardView RequestRedraw];
						
			return;
			 */
		}
		
	}
	
	// Reach here if either tap was outside leaderboard, or no car was found at tap point
	[self handleTimeControllerGestureInView:gestureView AtX:x Y:y];
}

- (void) OnDoubleTapGestureInView:(UIView *)gestureView AtX:(float)x Y:(float)y
{
	[super OnDoubleTapGestureInView:gestureView AtX:x Y:y];
}


- (void) OnDragGestureInView:(UIView *)gestureView ByX:(float)x Y:(float)y SpeedX:(float)speedx SpeedY:(float)speedy State:(int)state Recognizer:(UIDragDropGestureRecognizer *)recognizer
{
	// Can drag from leaderboard to either photo container, or between photo containers
	
	// Behaviour depends on state	
	switch(state)
	{
		case UIGestureRecognizerStateBegan:
		{	
			if(draggedDriverName)
			{
				[draggedDriverName release];
				draggedDriverName = nil;
			}

			if(gestureView == leaderboardView)
			{
				
				CGPoint downPoint = [recognizer downPoint];
				NSString * name = [leaderboardView carNameAtX:downPoint.x Y:downPoint.y];
					
				if(name && [name length] > 0)
				{
					draggedDriverName = [name retain];
				}
			}
			else if(gestureView == driverContainer1)
			{
				if(driver1 && [driver1 length] > 0)
				{
					draggedDriverName = [driver1 retain];
				}
			}
			else if(gestureView == driverContainer2)
			{
				if(driver2 && [driver2 length] > 0)
				{
					draggedDriverName = [driver2 retain];
				}
			}
			
			[self.view addSubview:draggedDriverCell];
			[self addDropShadowToView:draggedDriverCell WithOffsetX:5 Y:5 Blur:3];
					
			CGRect cellRect = [draggedDriverCell bounds];
			CGRect dragFrame = CGRectMake(x - cellRect.size.width / 2, y - cellRect.size.height / 2, cellRect.size.width, cellRect.size.height);
			[draggedDriverCell setFrame:dragFrame];
					
			[draggedDriverText setText:draggedDriverName];
								
			break;
		}
			
		case UIGestureRecognizerStateChanged:
		{
			// Only do anything if we started properly
			if(!draggedDriverName)
				break;
			
			// Move the dragged cell
			CGRect frame = [draggedDriverCell frame];
			CGRect newFrame = CGRectOffset(frame, x, y);
			[draggedDriverCell setFrame:newFrame];
			
			break;
		}
			
		case UIGestureRecognizerStateEnded:
		{
			if(draggedDriverName)
			{
				[draggedDriverCell removeFromSuperview];
				
				// Check whether we are over a drop zone
				CGPoint point = [recognizer locationInView:driverContainer1];
				if([driverContainer1 pointInside:point withEvent:nil])
				{
					[self setDriver1:draggedDriverName];

					[[RacePadCoordinator Instance] SetViewHidden:self];
					[[RacePadCoordinator Instance] SetViewDisplayed:self];
					
					[self loadDriverInfo];
					[self RequestRedraw];
				}
				else
				{
					point = [recognizer locationInView:driverContainer2];
					if([driverContainer2 pointInside:point withEvent:nil])
					{
						[self setDriver2:draggedDriverName];
						
						[[RacePadCoordinator Instance] SetViewHidden:self];
						[[RacePadCoordinator Instance] SetViewDisplayed:self];
						
						[self loadDriverInfo];
						[self RequestRedraw];
					}
				}
				
				[draggedDriverName release];
				draggedDriverName = nil;
			}
			
			break;
		}
			
		default:
			break;
	}
}

- (IBAction) seeLapsPressed:(id)sender
{
	NSString * car = [trackMapView carToFollow];
	
	if(car && [car length] > 0)
		[self ShowDriverLapList:car];
}

- (void)ShowDriverLapList:(NSString *)driver
{
	if(driver_lap_list_controller_)
	{
		// Set the driver we want displayed
		[driver_lap_list_controller_ SetDriver:driver];
		
		// Set the style for its presentation
		[driver_lap_list_controller_ setModalTransitionStyle:UIModalTransitionStyleFlipHorizontal];
		[driver_lap_list_controller_ setModalPresentationStyle:UIModalPresentationCurrentContext];
		
		// And present it
		[self presentModalViewController:driver_lap_list_controller_ animated:true];
		driver_lap_list_controller_displayed_ = true;
	}
}

- (void)HideDriverLapListAnimated:(bool)animated
{
	if(driver_lap_list_controller_displayed_)
	{
		// Set the style for its animation
		[self setModalTransitionStyle:UIModalTransitionStyleFlipHorizontal];
		
		// And dismiss it
		[self dismissModalViewControllerAnimated:animated];
		driver_lap_list_controller_displayed_ = false;
	}
}

@end


=======
//
//  HeadToHeadViewController.m
//  RacePad
//
//  Created by Gareth Griffith on 12/1/10.
//  Copyright 2010 SBG Racing Services Ltd. All rights reserved.
//

#import "HeadToHeadViewController.h"

#import "RacePadCoordinator.h"
#import "BasePadTimeController.h"
#import "RacePadTitleBarController.h"

#import "RacePadDatabase.h"
#import "Telemetry.h"

#import "TrackMapView.h"
#import "TelemetryView.h"
#import "CommentaryView.h"
#import "TrackProfileView.h"
#import "BackgroundView.h"
#import "ShinyButton.h"
#import "CommentaryBubble.h"
#import "DriverViewController.h"

#import "AnimationTimer.h"
#import "HeadToHeadView.h"

#import "UIConstants.h"

@implementation HeadToHeadViewController

- (void)viewDidLoad
{
	[super viewDidLoad];
	
	// Set parameters for views
	[backgroundView setStyle:BG_STYLE_FULL_SCREEN_GREY_];
 	[leaderboard0View SetTableDataClass:[[RacePadDatabase Instance] leaderBoardData]];
 	[leaderboard1View SetTableDataClass:[[RacePadDatabase Instance] leaderBoardData]];
		
	//  Add extra gesture recognizers
	
	//	Tap recognizer for background,pit window and telemetry views
	[self addTapRecognizerToView:leaderboard0View];
	[self addTapRecognizerToView:leaderboard1View];
	[self addTapRecognizerToView:backgroundView];
	[self addTapRecognizerToView:headToHeadView];
	
	[[RacePadCoordinator Instance] AddView:headToHeadView WithType:RPC_HEAD_TO_HEAD_VIEW_];	
	[[RacePadCoordinator Instance] AddView:leaderboard0View WithType:RPC_LEADER_BOARD_VIEW_];
	[[RacePadCoordinator Instance] AddView:leaderboard1View WithType:RPC_LEADER_BOARD_VIEW_];
	[[RacePadCoordinator Instance] AddView:self WithType:RPC_HEAD_TO_HEAD_VIEW_];
}

- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation
{
    // Overriden to allow any orientation.
    return YES;
}

- (void)viewWillAppear:(BOOL)animated
{
	// Grab the title bar
	[[RacePadTitleBarController Instance] displayInViewController:self SupportCommentary: false];
	
	// Resize overlay views to match background
	[self showOverlays];
	[self positionOverlays];
	
	// Force background refresh
	[backgroundView RequestRedraw];
		
	[[RacePadCoordinator Instance] RegisterViewController:self WithTypeMask:( RPC_LEADER_BOARD_VIEW_ | RPC_HEAD_TO_HEAD_VIEW_ )];
	
	[[RacePadCoordinator Instance] SetViewDisplayed:leaderboard0View];
	[[RacePadCoordinator Instance] SetViewDisplayed:leaderboard1View];
	[[RacePadCoordinator Instance] SetViewDisplayed:headToHeadView];
	[[RacePadCoordinator Instance] SetViewDisplayed:self];

	// [[CommentaryBubble Instance] allowBubbles:backgroundView];
	[[CommentaryBubble Instance] noBubbles];
	
	// We disable the screen locking - because that seems to close the socket
	[[UIApplication sharedApplication] setIdleTimerDisabled:YES];
}

// Implement viewDidLoad to do additional setup after loading the view, typically from a nib.
- (void)viewWillDisappear:(BOOL)animated
{
	[[RacePadCoordinator Instance] SetViewHidden:headToHeadView];
	[[RacePadCoordinator Instance] SetViewHidden:leaderboard0View];
	[[RacePadCoordinator Instance] SetViewHidden:leaderboard1View];
	[[RacePadCoordinator Instance] SetViewHidden:self];
	[[RacePadCoordinator Instance] ReleaseViewController:self];
	
	// re-enable the screen locking
	[[UIApplication sharedApplication] setIdleTimerDisabled:NO];
}

- (void)willRotateToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation duration:(NSTimeInterval)duration
{
	[self hideOverlays];
	[super willRotateToInterfaceOrientation:toInterfaceOrientation duration:duration];
}

- (void)didRotateFromInterfaceOrientation:(UIInterfaceOrientation)fromInterfaceOrientation
{
	[backgroundView RequestRedraw];
	
	[self prePositionOverlays];	
	[self positionOverlays];
	
	[UIView beginAnimations:nil context:NULL];
	[UIView setAnimationDuration:0.75];
	[UIView setAnimationDelegate:self];
	[UIView setAnimationDidStopSelector:@selector(viewAnimationDidStop:finished:context:)];
	[self postPositionOverlays];
	[UIView commitAnimations];
	
	[super didRotateFromInterfaceOrientation:fromInterfaceOrientation];
}

- (void)didReceiveMemoryWarning
{
    // Releases the view if it doesn't have a superview.
    [super didReceiveMemoryWarning];
    
    // Release any cached data, images, etc that aren't in use.
}


- (void)viewDidUnload
{
    [super viewDidUnload];
    // Release any retained subviews of the main view.
    // e.g. self.myOutlet = nil;
}


- (void)dealloc
{
    [super dealloc];
}

- (HelpViewController *) helpController
{
	/*
	if(!helpController)
		helpController = [[TelemetryHelpController alloc] initWithNibName:@"TelemetryHelp" bundle:nil];
	
	return (HelpViewController *)helpController;
	*/
	
	return nil;
}

- (void) prePositionOverlays
{
	[headToHeadView setAlpha:0.0];
	[headToHeadView setHidden:false];
	[leaderboard0View setAlpha:0.0];
	[leaderboard0View setHidden:false];
	[leaderboard1View setAlpha:0.0];
	[leaderboard1View setHidden:false];
}

- (void) postPositionOverlays
{
	[headToHeadView setAlpha:1.0];
	[leaderboard0View setAlpha:1.0];
	[leaderboard1View setAlpha:1.0];
}

- (void)positionOverlays
{
	// Get the device orientation and set things up accordingly
	int orientation = [[RacePadCoordinator Instance] deviceOrientation];
	
	int bg_inset = [backgroundView inset];
	CGRect bg_frame = [backgroundView frame];
	CGRect inset_frame = CGRectInset(bg_frame, bg_inset, bg_inset);
	
	int inset = [backgroundView inset] + 10;
	
	CGRect lb_frame;
	lb_frame = CGRectMake(inset_frame.origin.x + 5, inset_frame.origin.y + 45, 60, inset_frame.size.height - 45);
	[leaderboard0View setFrame:lb_frame];
	
	int x0 = lb_frame.origin.x + lb_frame.size.width + inset;

	lb_frame = CGRectMake(inset_frame.origin.x + inset_frame.size.width - 60 - 5, inset_frame.origin.y + 45, 60, inset_frame.size.height - 45);
	[leaderboard1View setFrame:lb_frame];

	int x1 = lb_frame.origin.x - inset;
	
	[headToHeadView setFrame:CGRectMake(x0, 300, x1 - x0, 300)];
		
	[self addBackgroundFrames];
}

- (void)addBackgroundFrames
{
	[backgroundView clearFrames];
	[backgroundView addFrame:[headToHeadView frame]];
}

- (void)showOverlays
{
	[headToHeadView setHidden:false];
	[headToHeadView setAlpha:1.0];
	[leaderboard0View setHidden:false];
	[leaderboard0View RequestRedraw];
	[leaderboard1View setHidden:false];
	[leaderboard1View RequestRedraw];
}

- (void)hideOverlays
{
	[headToHeadView setHidden:true];
	[leaderboard0View setHidden:true];
	[leaderboard1View setHidden:true];
}

- (void)RequestRedraw
{
	bool driverFound = false;
	
	HeadToHead *headToHead = [[RacePadDatabase Instance] headToHead];
	
	if(headToHead)
	{
		NSString * abbr = [headToHead abbr0];
		
		if(abbr && [abbr length] > 0)
		{
			driverFound = true;
			
			// Get image list for the driver images
			RacePadDatabase *database = [RacePadDatabase Instance];
			ImageListStore * image_store = [database imageListStore];
			
			ImageList *photoImageList = image_store ? [image_store findList:@"DriverPhotos"] : nil;
			
			if(photoImageList)
			{
				UIImage * image = [photoImageList findItem:abbr];
				if(image)
					[driver0Photo setImage:image];
				else
					[driver0Photo setImage:[UIImage imageNamed:@"NoPhoto.png"]];
			}
			else
			{
				[driver0Photo setImage:[UIImage imageNamed:@"NoPhoto.png"]];
			}
			
			NSString * firstName = [headToHead firstName0];
			NSString * surname = [headToHead surname0];
			NSString * teamName = [headToHead teamName0];
			
			[driver0FirstNameLabel setText:firstName];
			[driver0SurnameLabel setText:surname];
			[driver0TeamLabel setText:teamName];
		}
		
		abbr = [headToHead abbr1];
		
		if(abbr && [abbr length] > 0)
		{
			driverFound = true;
			
			// Get image list for the driver images
			RacePadDatabase *database = [RacePadDatabase Instance];
			ImageListStore * image_store = [database imageListStore];
			
			ImageList *photoImageList = image_store ? [image_store findList:@"DriverPhotos"] : nil;
			
			if(photoImageList)
			{
				UIImage * image = [photoImageList findItem:abbr];
				if(image)
					[driver1Photo setImage:image];
				else
					[driver1Photo setImage:[UIImage imageNamed:@"NoPhoto.png"]];
			}
			else
			{
				[driver1Photo setImage:[UIImage imageNamed:@"NoPhoto.png"]];
			}
			
			NSString * firstName = [headToHead firstName1];
			NSString * surname = [headToHead surname1];
			NSString * teamName = [headToHead teamName1];
			
			[driver1FirstNameLabel setText:firstName];
			[driver1SurnameLabel setText:surname];
			[driver1TeamLabel setText:teamName];
		}
	}
}

- (void) OnTapGestureInView:(UIView *)gestureView AtX:(float)x Y:(float)y
{
	if([gestureView isKindOfClass:[leaderboard0View class]])
	{
		if ( gestureView == leaderboard0View )
		{
			NSString *car = [leaderboard0View carNameAtX:x Y:y];
			[[[RacePadDatabase Instance] headToHead] setDriver0: car];
			leaderboard0View.highlightCar = car;
		}
		else
		{
			NSString *car = [leaderboard1View carNameAtX:x Y:y];
			[[[RacePadDatabase Instance] headToHead] setDriver1: car];
			leaderboard1View.highlightCar = car;
		}
		
		[leaderboard0View RequestRedraw];
		[leaderboard1View RequestRedraw];
		
		// Force reload of data
		[[RacePadCoordinator Instance] SetViewHidden:headToHeadView];
		[[RacePadCoordinator Instance] SetViewHidden:self];
		[[RacePadCoordinator Instance] SetViewDisplayed:self];
		[[RacePadCoordinator Instance] SetViewDisplayed:headToHeadView];
		return;
	}
		
	[self handleTimeControllerGestureInView:gestureView AtX:x Y:y];
}

@end


>>>>>>> .r219
